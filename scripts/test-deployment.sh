#!/bin/bash

# üöÄ Script de Test de D√©ploiement Complet
# Usage: ./scripts/test-deployment.sh [host] [user]

set -euo pipefail

# Configuration par d√©faut
DEFAULT_HOST="3.80.11.141"
DEFAULT_USER="ubuntu"
DEFAULT_KEY="$HOME/.ssh/deploy_key"

# Param√®tres
HOST="${1:-$DEFAULT_HOST}"
USER="${2:-$DEFAULT_USER}"
KEY_PATH="${3:-$DEFAULT_KEY}"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üöÄ Test de D√©ploiement Complet${NC}"
echo "=================================="
echo ""

echo -e "${BLUE}üìã Configuration:${NC}"
echo "  Host: $HOST"
echo "  User: $USER"
echo "  Key: $KEY_PATH"
echo ""

# Test 1: Connexion SSH
echo -e "${BLUE}üîê Test 1: Connexion SSH${NC}"
echo "------------------------"
if ssh -i "$KEY_PATH" -o ConnectTimeout=10 -o StrictHostKeyChecking=no "$USER@$HOST" "echo 'SSH OK'" >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Connexion SSH r√©ussie${NC}"
else
    echo -e "${RED}‚ùå √âchec de la connexion SSH${NC}"
    exit 1
fi

# Test 2: Docker
echo -e "${BLUE}üê≥ Test 2: Docker${NC}"
echo "----------------"
if ssh -i "$KEY_PATH" "$USER@$HOST" "docker --version >/dev/null 2>&1"; then
    echo -e "${GREEN}‚úÖ Docker disponible${NC}"
else
    echo -e "${RED}‚ùå Docker non disponible${NC}"
    exit 1
fi

# Test 3: Permissions Docker
echo -e "${BLUE}üîë Test 3: Permissions Docker${NC}"
echo "------------------------"
if ssh -i "$KEY_PATH" "$USER@$HOST" "docker ps >/dev/null 2>&1"; then
    echo -e "${GREEN}‚úÖ Permissions Docker OK${NC}"
else
    echo -e "${RED}‚ùå Pas de permissions Docker${NC}"
    exit 1
fi

# Test 4: Port 80
echo -e "${BLUE}üåê Test 4: Port 80${NC}"
echo "----------------"
if ssh -i "$KEY_PATH" "$USER@$HOST" "sudo ss -tlnp | grep -q ':80 '"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Port 80 occup√© - nginx d√©tect√©${NC}"
    echo "   Arr√™t de nginx..."
    ssh -i "$KEY_PATH" "$USER@$HOST" "sudo systemctl stop nginx && sudo systemctl disable nginx"
    echo -e "${GREEN}‚úÖ Nginx arr√™t√©${NC}"
else
    echo -e "${GREEN}‚úÖ Port 80 libre${NC}"
fi

# Test 5: Nettoyage des containers existants
echo -e "${BLUE}üßπ Test 5: Nettoyage${NC}"
echo "-------------------"
ssh -i "$KEY_PATH" "$USER@$HOST" "docker rm -f ci-cd-demo 2>/dev/null || true"
echo -e "${GREEN}‚úÖ Containers nettoy√©s${NC}"

# Test 6: Simulation du d√©ploiement
echo -e "${BLUE}üöÄ Test 6: Simulation D√©ploiement${NC}"
echo "--------------------------------"
echo "Note: Ce test n√©cessite une image Docker valide"
echo "Pour un test complet, configurez d'abord les secrets GitHub"
echo ""

# V√©rification finale
echo -e "${BLUE}üìã √âtat Final du Serveur${NC}"
echo "------------------------"
ssh -i "$KEY_PATH" "$USER@$HOST" "
    echo '  Port 80: ' \$(sudo ss -tlnp | grep -q ':80 ' && echo 'Occup√©' || echo 'Libre')
    echo '  Docker containers: ' \$(docker ps -q | wc -l) ' actifs'
    echo '  Docker images: ' \$(docker images -q | wc -l) ' locales'
    echo '  Nginx status: ' \$(sudo systemctl is-active nginx 2>/dev/null || echo 'Arr√™t√©')
"

echo ""
echo -e "${GREEN}üéâ Serveur pr√™t pour le d√©ploiement !${NC}"
echo ""
echo -e "${BLUE}üìù Prochaines √©tapes:${NC}"
echo "1. Configurez les secrets GitHub Actions :"
echo "   - DEPLOY_HOST: $HOST"
echo "   - DEPLOY_USER: $USER"
echo "   - DEPLOY_SSH_KEY: [cl√© priv√©e]"
echo "   - GHCR_PAT: [token GitHub]"
echo "   - GHCR_USERNAME: [nom d'utilisateur GitHub]"
echo ""
echo "2. Lancez le workflow de d√©ploiement :"
echo "   Actions ‚Üí Deploy ‚Üí Run workflow"
echo "   Option: stop_nginx = true (pour arr√™ter nginx)"
echo ""
echo "3. V√©rifiez le d√©ploiement :"
echo "   curl http://$HOST/health"
