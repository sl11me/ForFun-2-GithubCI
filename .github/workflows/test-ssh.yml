name: Test SSH Connection

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test-ssh:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Secrets (Sans afficher les valeurs sensibles)
        run: |
          echo "üîç Diagnostic des secrets GitHub Actions"
          echo "======================================"
          echo ""
          echo "Host configur√©: ${{ secrets.DEPLOY_HOST != '' && '‚úÖ' || '‚ùå' }}"
          echo "User configur√©: ${{ secrets.DEPLOY_USER != '' && '‚úÖ' || '‚ùå' }}"
          echo "SSH Key configur√©e: ${{ secrets.DEPLOY_SSH_KEY != '' && '‚úÖ' || '‚ùå' }}"
          echo "GHCR PAT configur√©: ${{ secrets.GHCR_PAT != '' && '‚úÖ' || '‚ùå' }}"
          echo "GHCR Username configur√©: ${{ secrets.GHCR_USERNAME != '' && '‚úÖ' || '‚ùå' }}"
          echo ""
          
          # V√©rifications d√©taill√©es
          if [ -z "${{ secrets.DEPLOY_HOST }}" ]; then
            echo "‚ùå DEPLOY_HOST manquant"
            echo "   Ajoutez l'IP du serveur dans GitHub Secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.DEPLOY_USER }}" ]; then
            echo "‚ùå DEPLOY_USER manquant"
            echo "   Ajoutez l'utilisateur SSH dans GitHub Secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.DEPLOY_SSH_KEY }}" ]; then
            echo "‚ùå DEPLOY_SSH_KEY manquant"
            echo "   Ajoutez la cl√© priv√©e SSH dans GitHub Secrets"
            exit 1
          fi
          
          echo "‚úÖ Tous les secrets requis sont configur√©s"
          echo ""

      - name: Test SSH Connection (Verbose)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            echo "‚úÖ Connexion SSH r√©ussie !"
            echo ""
            echo "üìã Informations du serveur:"
            echo "  OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
            echo "  Hostname: $(hostname)"
            echo "  User: $(whoami)"
            echo "  Uptime: $(uptime -p)"
            echo "  Memory: $(free -h | grep Mem | awk '{print $2}')"
            echo "  Disk: $(df -h / | tail -1 | awk '{print $4}') libre"
            echo ""
            echo "üîß Test des commandes de base:"
            echo "  pwd: $(pwd)"
            echo "  whoami: $(whoami)"
            echo "  id: $(id)"
            echo ""
            echo "üéâ Serveur pr√™t pour le d√©ploiement !"

      - name: Success Message
        if: success()
        run: |
          echo "üéâ Test SSH r√©ussi !"
          echo "Le serveur est accessible et configur√© correctement."
          echo ""
          echo "üìù Prochaines √©tapes:"
          echo "1. Le workflow de d√©ploiement principal devrait maintenant fonctionner"
          echo "2. Vous pouvez lancer le d√©ploiement via Actions ‚Üí Deploy"
          echo "3. V√©rifiez que Docker est install√© sur le serveur"

      - name: Failure Message
        if: failure()
        run: |
          echo "‚ùå Test SSH √©chou√© !"
          echo ""
          echo "üîß Actions √† effectuer:"
          echo "1. V√©rifiez que la cl√© publique est dans ~/.ssh/authorized_keys sur le serveur"
          echo "2. V√©rifiez les permissions: chmod 700 ~/.ssh && chmod 600 ~/.ssh/authorized_keys"
          echo "3. V√©rifiez que l'utilisateur '${{ secrets.DEPLOY_USER }}' existe sur le serveur"
          echo "4. Testez manuellement: ssh -i ~/.ssh/deploy_key ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}"
          echo ""
          echo "üìñ Consultez TROUBLESHOOTING.md pour plus de d√©tails"
