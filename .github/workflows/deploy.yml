name: Deploy

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Tag de l'image à déployer (ex: latest ou un SHA)"
        required: true
        default: "latest"

permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository | lower }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Afficher cible
        run: echo "Déploiement sur ${{ secrets.DEPLOY_HOST }}"

      - name: Déployer via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -euo pipefail

            # Pré-requis: Docker présent (sinon installer)
            if ! command -v docker >/dev/null 2>&1; then
              echo "[+] Installing Docker CE"
              sudo apt-get update -y
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo $VERSION_CODENAME) stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
              sudo usermod -aG docker ${USER} || true
            fi

            echo "[+] Docker version:"
            docker --version

            # Login GHCR (via PAT read:packages)
            echo "${{ secrets.GHCR_PAT }}" | docker login ${{ env.REGISTRY }} -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
            APP_NAME="ci-cd-demo"

            echo "[+] Pull $IMAGE"
            docker pull "$IMAGE"

            echo "[+] Stop/Remove container if exists"
            docker rm -f "$APP_NAME" 2>/dev/null || true

            echo "[+] Run container (expose 80 -> 8000)"
            docker run -d --name "$APP_NAME" --restart=always -p 80:8000 "$IMAGE"

            echo "[+] ps:"
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}"
