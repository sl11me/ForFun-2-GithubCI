name: Deploy

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Tag de l'image √† d√©ployer (ex: latest ou un SHA)"
        required: true
        default: "latest"
      stop_nginx:
        description: "Arr√™ter nginx pour lib√©rer le port 80 ?"
        required: false
        default: true
        type: boolean

permissions:
  contents: read

env:
  REGISTRY: ghcr.io

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set image name
        run: echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Debug Secrets (Sans afficher les valeurs sensibles)
        run: |
          echo "üîç Diagnostic des secrets GitHub Actions"
          echo "======================================"
          echo ""
          echo "Host configur√©: ${{ secrets.DEPLOY_HOST != '' && '‚úÖ' || '‚ùå' }}"
          echo "User configur√©: ${{ secrets.DEPLOY_USER != '' && '‚úÖ' || '‚ùå' }}"
          echo "SSH Key configur√©e: ${{ secrets.DEPLOY_SSH_KEY != '' && '‚úÖ' || '‚ùå' }}"
          echo "GHCR PAT configur√©: ${{ secrets.GHCR_PAT != '' && '‚úÖ' || '‚ùå' }}"
          echo "GHCR Username configur√©: ${{ secrets.GHCR_USERNAME != '' && '‚úÖ' || '‚ùå' }}"
          echo ""
          
          # V√©rifications d√©taill√©es
          if [ -z "${{ secrets.DEPLOY_HOST }}" ]; then
            echo "‚ùå DEPLOY_HOST manquant"
            echo "   Ajoutez l'IP du serveur dans GitHub Secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.DEPLOY_USER }}" ]; then
            echo "‚ùå DEPLOY_USER manquant"
            echo "   Ajoutez l'utilisateur SSH dans GitHub Secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.DEPLOY_SSH_KEY }}" ]; then
            echo "‚ùå DEPLOY_SSH_KEY manquant"
            echo "   Ajoutez la cl√© priv√©e SSH dans GitHub Secrets"
            exit 1
          fi
          
          echo "‚úÖ Tous les secrets requis sont configur√©s"
          echo ""

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            echo "‚úÖ Connexion SSH r√©ussie !"
            echo ""
            echo "üìã Informations du serveur:"
            echo "  OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
            echo "  Hostname: $(hostname)"
            echo "  User: $(whoami)"
            echo "  Uptime: $(uptime -p)"
            echo "  Memory: $(free -h | grep Mem | awk '{print $2}')"
            echo "  Disk: $(df -h / | tail -1 | awk '{print $4}') libre"
            echo ""
            echo "üîß Test des commandes de base:"
            echo "  pwd: $(pwd)"
            echo "  whoami: $(whoami)"
            echo "  id: $(id)"
            echo ""
            echo "üéâ Serveur pr√™t pour le d√©ploiement !"

      - name: Afficher cible
        run: echo "üéØ D√©ploiement sur ${{ secrets.DEPLOY_HOST }}"

      - name: D√©ployer via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -euo pipefail

            # Pr√©-requis: Docker pr√©sent (sinon installer)
            if ! command -v docker >/dev/null 2>&1; then
              echo "[+] Installing Docker CE"
              sudo apt-get update -y
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo $VERSION_CODENAME) stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
              sudo usermod -aG docker ${USER} || true
            fi

            echo "[+] Docker version:"
            docker --version

            # Login GHCR (via PAT read:packages)
            echo "${{ secrets.GHCR_PAT }}" | docker login ${{ env.REGISTRY }} -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
            APP_NAME="ci-cd-demo"

            echo "[+] Pull $IMAGE"
            docker pull "$IMAGE"

            echo "[+] Stop/Remove container if exists"
            docker rm -f "$APP_NAME" 2>/dev/null || true

            # Gestion du conflit de port
            echo "[+] V√©rification du port 80..."
            if sudo ss -tlnp | grep -q ":80 "; then
              echo "[!] Port 80 occup√© d√©tect√©"
              if [ "${{ github.event.inputs.stop_nginx }}" = "true" ]; then
                echo "[+] Arr√™t de nginx pour lib√©rer le port 80"
                sudo systemctl stop nginx
                sudo systemctl disable nginx
                echo "[+] Nginx arr√™t√©"
              else
                echo "[+] Utilisation du port 8080 au lieu de 80"
                PORT_MAPPING="-p 8080:8000"
              fi
            else
              echo "[+] Port 80 libre"
              PORT_MAPPING="-p 80:8000"
            fi

            echo "[+] Run container (expose $PORT_MAPPING)"
            docker run -d --name "$APP_NAME" --restart=always $PORT_MAPPING "$IMAGE"

            echo "[+] ps:"
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}"

            # Afficher l'URL d'acc√®s
            if [ "$PORT_MAPPING" = "-p 80:8000" ]; then
              echo "[+] Application accessible sur: http://${{ secrets.DEPLOY_HOST }}/"
            else
              echo "[+] Application accessible sur: http://${{ secrets.DEPLOY_HOST }}:8080/"
            fi
